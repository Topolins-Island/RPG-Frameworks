using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BattleManager : MonoBehaviour
{
    public static BattleManager instance;

    public PlayerUnit playerLeader;
    public PlayerUnit playerSupport;
    public EnemyUnit enemyLeader;
    public EnemyUnit enemySupport;
    public List<EnemyUnit> enemies;

    public List<Unit> battlers;

    private void Start()
    {
        instance = this;
        SortUnits();
        PrepUnits();
        StartCoroutine(LineProcessing());
    }

    IEnumerator LineProcessing()
    {
        while (!BattleOver())
        {
            if (battlers.Count == 0)
                SortUnits();

            Unit current = battlers[0];
            battlers.RemoveAt(0);

            if (current.currentHP == 0)
                print("wtf");

            currentDone = false;

            current.Act();

            while (!currentDone)
                yield return null;

            yield return null;
        }
    }

    //A controlling bool
    bool currentDone = false;
    public void Continue()
    {
        currentDone = true;
    }

    bool BattleOver()
    {
        bool over = false;

        if (playerLeader == null || enemyLeader == null)
            over = true;

        return over;
    }

    public void UnitDied(Unit theDeceased)
    {
        if (theDeceased == playerLeader)
        {
            if (enemySupport != null)
            {
                playerLeader = playerSupport;
                playerSupport = null;
            }
            else
                print("enemies won!");
        }
        if (theDeceased == playerSupport)
            playerSupport = null;

        if (theDeceased == enemyLeader)
        {
            if (enemySupport != null)
            {
                enemyLeader = enemySupport;
                enemySupport = null;
            }
            else
                print("player's won!");
        }

        if (theDeceased == enemySupport)
            enemySupport = null;

        battlers.Remove(theDeceased);
    }

    void PrepUnits()
    {
        if (playerLeader != null)
            playerLeader.controller = GetComponent<PlayerUnitController>();
        if (playerSupport != null)
            playerSupport.controller = GetComponent<PlayerUnitController>();
        /*
        if (enemyLeader != null)
            battlers.Add(enemyLeader);
        if (enemySupport != null)
            battlers.Add(enemySupport);
        */
    }

    void SortUnits()
    {
        battlers = new List<Unit>();
        if (playerLeader != null)
            battlers.Add(playerLeader);
        if (playerSupport != null)
            battlers.Add(playerSupport);
        if (enemyLeader != null)
            battlers.Add(enemyLeader);
        if(enemySupport != null)
            battlers.Add(enemySupport);

        bool swapped = false;
        do
        {
            swapped = false;
            for (int i = 0; i < battlers.Count - 1; i++)
            {
                if (battlers[i].speed < battlers[i + 1].speed)
                {
                    Unit temp = battlers[i];
                    battlers[i] = battlers[i + 1];
                    battlers[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
}

public class BattleManagerEp01 : MonoBehaviour
{
    public static BattleManagerEp01 instance;

    //This is the list of units that is compiled before the battle begins
    //When we get to units asking for targets, we will give them units from this list
    //And when we get to unit death, they will be removed from here.
    public List<Unit> units;

    //This list is for the units that are waiting to go, it is only Created in the SortUnits method
    List<Unit> battlers;

    private void Start()
    {
        instance = this;
        SortUnits();
        StartCoroutine(LineProcessing());
    }

    IEnumerator LineProcessing()
    {
        while (true)
        {
            if (battlers.Count == 0)
                SortUnits();

            Unit current = battlers[0];
            battlers.RemoveAt(0);

            current.Act();

            currentDone = false;

            while (!currentDone)
                yield return null;
        }
    }

    //A controlling bool
    bool currentDone = false;
    public void Continue()
    {
        currentDone = true;
    }

    void SortUnits()
    {
        battlers = new List<Unit>();
        battlers.AddRange(units);

        bool swapped = false;
        do
        {
            swapped = false;
            for (int i = 0; i < battlers.Count - 1; i++)
            {
                if (battlers[i].speed < battlers[i + 1].speed)
                {
                    Unit temp = battlers[i];
                    battlers[i] = battlers[i + 1];
                    battlers[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
}

public class BattleManagerEp02 : MonoBehaviour
{
    public static BattleManagerEp02 instance;

    public Unit playerLeader;
    public Unit playerSupport;
    public Unit enemyLeader;
    public Unit enemySupport;

    List<Unit> battlers;

    private void Start()
    {
        instance = this;
        SortUnits();
        StartCoroutine(LineProcessing());
    }

    IEnumerator LineProcessing()
    {
        while (true)
        {
            if (battlers.Count == 0)
                SortUnits();

            Unit current = battlers[0];
            battlers.RemoveAt(0);

            current.Act();

            currentDone = false;

            while (!currentDone)
                yield return null;
        }
    }

    //A controlling bool
    bool currentDone = false;
    public void Continue()
    {
        currentDone = true;
    }

    void SortUnits()
    {
        battlers = new List<Unit>();
        battlers.Add(playerLeader);
        battlers.Add(playerSupport);
        battlers.Add(enemyLeader);
        battlers.Add(enemySupport);

        bool swapped = false;
        do
        {
            swapped = false;
            for (int i = 0; i < battlers.Count - 1; i++)
            {
                if (battlers[i].speed < battlers[i + 1].speed)
                {
                    Unit temp = battlers[i];
                    battlers[i] = battlers[i + 1];
                    battlers[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
}

public class BattleManagerEp03 : MonoBehaviour
{
    public static BattleManagerEp03 instance;

    public Unit playerLeader;
    public Unit playerSupport;
    public Unit enemyLeader;
    public Unit enemySupport;

    List<Unit> battlers;

    private void Start()
    {
        instance = this;
        SortUnits();
        StartCoroutine(LineProcessing());
    }

    IEnumerator LineProcessing()
    {
        currentDone = false;

        while (!currentDone)
            yield return null;

        while (!BattleOver())
        {
            if (battlers.Count == 0)
                SortUnits();

            Unit current = battlers[0];
            battlers.RemoveAt(0);

            current.Act();

            currentDone = false;

            while (!currentDone)
                yield return null;
        }
    }

    //A controlling bool
    bool currentDone = false;
    public void Continue()
    {
        currentDone = true;
    }

    bool BattleOver()
    {
        bool over = false;

        if (playerLeader == null || enemyLeader == null)
            over = true;

        return over;
    }

    public void UnitDied(Unit theDeceased)
    {
        if (theDeceased == playerLeader)
        {
            if (enemySupport != null)
            {
                playerLeader = playerSupport;
                playerSupport = null;
            }
            else
                print("enemies won!");
        }
        if (theDeceased == playerSupport)
            playerSupport = null;

        if (theDeceased == enemyLeader)
        {
            if (enemySupport != null)
            {
                enemyLeader = enemySupport;
                enemySupport = null;
            }
            else
                print("player's won!");
        }

        if (theDeceased == enemySupport)
            enemySupport = null;

        battlers.Remove(theDeceased);
    }

    void SortUnits()
    {
        battlers = new List<Unit>();
        if (playerLeader != null)
            battlers.Add(playerLeader);
        if (playerSupport != null)
            battlers.Add(playerSupport);
        if (enemyLeader != null)
            battlers.Add(enemyLeader);
        if (enemySupport != null)
            battlers.Add(enemySupport);

        bool swapped = false;
        do
        {
            swapped = false;
            for (int i = 0; i < battlers.Count - 1; i++)
            {
                if (battlers[i].speed < battlers[i + 1].speed)
                {
                    Unit temp = battlers[i];
                    battlers[i] = battlers[i + 1];
                    battlers[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
}
